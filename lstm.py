# -*- coding: utf-8 -*-
"""LSTM

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gM5BBrdUl_RuQERHexSNHOtD55_w8ZJV
"""

!pip install tensorflow

import numpy as np
import pandas as pd
import datetime
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam
from tensorflow.keras import layers

data = pd.read_csv("/content/BTC-USD.csv")
data.tail()

data = data.dropna()

data.set_index(data['Date'])

plt.plot(data['Open'])
plt.plot(data['High'])
plt.plot(data['Low'])
plt.plot(data['Close'])
plt.legend(data[['Open','High','Low','Close']])

data = data[['Date','Close']]
data.head()

def make_date_type(a):
  year,month,date = map(int,a.split('-'))
  date_obj = datetime.datetime(year = year , month = month , day = date)
  return date_obj

data['Date'] = data['Date'].apply(make_date_type)
data.index = data.pop('Date')

plt.plot(data)

data.head(7)

def create_window(data):
  lag_periods = 5
  for i in range(1, lag_periods + 1):
      data[f'Target-{i}'] = data['Close'].shift(i)
  data.columns = [f'Target-{lag_periods + 1 - i}' if 'Target' in col else col for i, col in enumerate(data.columns, 1)]
  data.reset_index(inplace=True)
  data.dropna(inplace=True)
  data.rename(columns={'Close': 'Target', 'Target-2': 'Target-1', 'Target-1': 'Target-2', 'Target-0': 'Target-3'}, inplace=True)

  return data

data = create_window(data)
data

column_names = ["Date","Target","Target-5","Target-4","Target-3","Target-2","Target-1"]
data.columns = column_names

data

data = data[['Date','Target-5', 'Target-4', 'Target-3', 'Target-2', 'Target-1', 'Target']]
data.set_index(data['Date'])

data.tail(6)

def window_to_train(window):
  df_as_np = window.to_numpy()
  dates = df_as_np[:,0]
  mid = df_as_np[:,1:-1]
  X = mid.reshape(len(mid),mid.shape[1],1)
  Y = df_as_np[:,-1]
  return dates,X.astype(np.float32),Y.astype(np.float32)

dates , X , Y = window_to_train(data)

print(dates.shape,X.shape,Y.shape)

a = int(len(dates) * .87)
b = int(len(dates) * .95)
dates_train, X_train, y_train = dates[:a], X[:a], Y[:a]
dates_val, X_val, y_val = dates[a:b], X[a:b], Y[a:b]
dates_test, X_test, y_test = dates[b:], X[b:], Y[b:]

dates_train

sequence_length = X_train.shape[1]

plt.plot(dates_train,y_train)
plt.plot(dates_val,y_val)
plt.plot(dates_test,y_test)
plt.legend(["Train","Validation","Test"])

import tensorflow as tf
model = Sequential([layers.LSTM(32,activation = 'relu',input_shape = (5,1)),
                    layers.Dense(16, activation='relu'),
                    layers.Dense(1)])
model.compile(loss = tf.keras.losses.MeanSquaredError(),optimizer = tf.keras.optimizers.Adagrad(), metrics = ['mse'])

model.summary()

model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=100)

train_predictions = model.predict(X_train).flatten()
plt.plot(dates_train, train_predictions)
plt.plot(dates_train, y_train)

val_predictions = model.predict(X_val).flatten()

plt.plot(dates_val, val_predictions)
plt.plot(dates_val, y_val)
plt.legend(['Validation Predictions', 'Validation Observations'])

test_predictions = model.predict(X_test).flatten()
plt.plot(dates_test, test_predictions)
plt.plot(dates_test, y_test)
plt.legend(['Testing Predictions', 'Testing Observations'])

model.evaluate(X_test,y_test)

plt.plot(dates_train, train_predictions)
plt.plot(dates_train, y_train)
plt.plot(dates_val, val_predictions)
plt.plot(dates_val, y_val)
plt.plot(dates_test, test_predictions)
plt.plot(dates_test, y_test)
plt.legend(['Training Predictions',
            'Training Observations',
            'Validation Predictions',
            'Validation Observations',
            'Testing Predictions',
            'Testing Observations'])